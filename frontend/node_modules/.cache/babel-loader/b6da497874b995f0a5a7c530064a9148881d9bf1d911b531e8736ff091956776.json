{"ast":null,"code":"var _jsxFileName = \"X:\\\\Projects\\\\watch and earn website\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { toast } from 'react-hot-toast';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const queryClient = useQueryClient();\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // Fetch user profile\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchUserProfile = async () => {\n    try {\n      const response = await api.get('/api/auth/profile');\n      setUser(response.data.user);\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      // Token might be invalid, clear it\n      localStorage.removeItem('token');\n      delete api.defaults.headers.common['Authorization'];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await api.post('/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Set user\n      setUser(user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed';\n      throw new Error(message);\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await api.post('/api/auth/register', userData);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Set user\n      setUser(user);\n      toast.success('Registration successful!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await api.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage and state\n      localStorage.removeItem('token');\n      delete api.defaults.headers.common['Authorization'];\n      setUser(null);\n\n      // Clear all queries\n      queryClient.clear();\n      toast.success('Logged out successfully');\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      const response = await api.put('/api/auth/profile', profileData);\n      setUser(response.data.user);\n      toast.success('Profile updated successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to update profile';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      await api.put('/api/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      toast.success('Password changed successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to change password';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      await api.post('/api/auth/forgot-password', {\n        email\n      });\n      toast.success('Password reset instructions sent to your email!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to send reset email';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const resetPassword = async (resetToken, newPassword) => {\n    try {\n      await api.post('/api/auth/reset-password', {\n        resetToken,\n        newPassword\n      });\n      toast.success('Password reset successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to reset password';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"/SEeG5jrrwBp/R9x+aOU9QmSYUA=\", false, function () {\n  return [useQueryClient];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQuery","useQueryClient","toast","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","queryClient","token","localStorage","getItem","defaults","headers","common","fetchUserProfile","response","get","data","error","console","removeItem","login","email","password","post","setItem","success","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","logout","clear","updateProfile","profileData","put","_error$response3","_error$response3$data","changePassword","currentPassword","newPassword","_error$response4","_error$response4$data","forgotPassword","_error$response5","_error$response5$data","resetPassword","resetToken","_error$response6","_error$response6$data","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["X:/Projects/watch and earn website/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useQuery, useQueryClient } from 'react-query';\r\nimport { toast } from 'react-hot-toast';\r\nimport api from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const queryClient = useQueryClient();\r\n\r\n  // Check if user is logged in on app start\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      // Fetch user profile\r\n      fetchUserProfile();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchUserProfile = async () => {\r\n    try {\r\n      const response = await api.get('/api/auth/profile');\r\n      setUser(response.data.user);\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      // Token might be invalid, clear it\r\n      localStorage.removeItem('token');\r\n      delete api.defaults.headers.common['Authorization'];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await api.post('/api/auth/login', { email, password });\r\n      const { token, user } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Set user\r\n      setUser(user);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Login failed';\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await api.post('/api/auth/register', userData);\r\n      const { token, user } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Set user\r\n      setUser(user);\r\n      \r\n      toast.success('Registration successful!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Registration failed';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await api.post('/api/auth/logout');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      // Clear local storage and state\r\n      localStorage.removeItem('token');\r\n      delete api.defaults.headers.common['Authorization'];\r\n      setUser(null);\r\n      \r\n      // Clear all queries\r\n      queryClient.clear();\r\n      \r\n      toast.success('Logged out successfully');\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      const response = await api.put('/api/auth/profile', profileData);\r\n      setUser(response.data.user);\r\n      toast.success('Profile updated successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to update profile';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      await api.put('/api/auth/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      toast.success('Password changed successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to change password';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await api.post('/api/auth/forgot-password', { email });\r\n      toast.success('Password reset instructions sent to your email!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to send reset email';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (resetToken, newPassword) => {\r\n    try {\r\n      await api.post('/api/auth/reset-password', {\r\n        resetToken,\r\n        newPassword\r\n      });\r\n      toast.success('Password reset successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to reset password';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    changePassword,\r\n    forgotPassword,\r\n    resetPassword,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}