{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add auth token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  // Handle authentication errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear token and redirect to login\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n\n    // Only redirect if not already on login page\n    if (!window.location.pathname.includes('/login')) {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const authAPI = {\n  login: credentials => api.post('/api/auth/login', credentials),\n  register: userData => api.post('/api/auth/register', userData),\n  logout: () => api.post('/api/auth/logout'),\n  getProfile: () => api.get('/api/auth/profile'),\n  updateProfile: profileData => api.put('/api/auth/profile', profileData),\n  changePassword: passwordData => api.put('/api/auth/change-password', passwordData),\n  forgotPassword: email => api.post('/api/auth/forgot-password', {\n    email\n  }),\n  resetPassword: resetData => api.post('/api/auth/reset-password', resetData)\n};\nexport const videosAPI = {\n  getAll: params => api.get('/api/videos', {\n    params\n  }),\n  getFeatured: () => api.get('/api/videos/featured'),\n  getById: id => api.get(`/api/videos/${id}`),\n  watch: (id, watchData) => api.post(`/api/videos/${id}/watch`, watchData),\n  getWatchHistory: params => api.get('/api/videos/history/watched', {\n    params\n  }),\n  getCategories: () => api.get('/api/videos/categories/list'),\n  getTrending: () => api.get('/api/videos/trending/list')\n};\nexport const rewardsAPI = {\n  getStats: () => api.get('/api/rewards/stats'),\n  getHistory: params => api.get('/api/rewards/history', {\n    params\n  }),\n  withdraw: withdrawalData => api.post('/api/rewards/withdraw', withdrawalData),\n  getWithdrawals: params => api.get('/api/rewards/withdrawals', {\n    params\n  }),\n  getWithdrawalMethods: () => api.get('/api/rewards/withdrawal-methods'),\n  getReferrals: () => api.get('/api/rewards/referrals'),\n  getDailyChart: params => api.get('/api/rewards/chart/daily', {\n    params\n  })\n};\nexport const usersAPI = {\n  getProfile: () => api.get('/api/users/profile'),\n  updateProfile: profileData => api.put('/api/users/profile', profileData),\n  getStats: () => api.get('/api/users/stats'),\n  getWatchHistory: params => api.get('/api/users/watch-history', {\n    params\n  }),\n  getReferrals: () => api.get('/api/users/referrals'),\n  deactivateAccount: password => api.post('/api/users/deactivate', {\n    password\n  }),\n  deleteAccount: password => api.delete('/api/users/delete', {\n    data: {\n      password\n    }\n  }),\n  getAchievements: () => api.get('/api/users/achievements')\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","defaults","common","window","location","pathname","includes","href","authAPI","login","credentials","post","register","userData","logout","getProfile","get","updateProfile","profileData","put","changePassword","passwordData","forgotPassword","email","resetPassword","resetData","videosAPI","getAll","params","getFeatured","getById","id","watch","watchData","getWatchHistory","getCategories","getTrending","rewardsAPI","getStats","getHistory","withdraw","withdrawalData","getWithdrawals","getWithdrawalMethods","getReferrals","getDailyChart","usersAPI","deactivateAccount","password","deleteAccount","delete","data","getAchievements"],"sources":["X:/Projects/watch and earn website/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle authentication errors\r\n    if (error.response?.status === 401) {\r\n      // Clear token and redirect to login\r\n      localStorage.removeItem('token');\r\n      delete api.defaults.headers.common['Authorization'];\r\n      \r\n      // Only redirect if not already on login page\r\n      if (!window.location.pathname.includes('/login')) {\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API endpoints\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/api/auth/login', credentials),\r\n  register: (userData) => api.post('/api/auth/register', userData),\r\n  logout: () => api.post('/api/auth/logout'),\r\n  getProfile: () => api.get('/api/auth/profile'),\r\n  updateProfile: (profileData) => api.put('/api/auth/profile', profileData),\r\n  changePassword: (passwordData) => api.put('/api/auth/change-password', passwordData),\r\n  forgotPassword: (email) => api.post('/api/auth/forgot-password', { email }),\r\n  resetPassword: (resetData) => api.post('/api/auth/reset-password', resetData),\r\n};\r\n\r\nexport const videosAPI = {\r\n  getAll: (params) => api.get('/api/videos', { params }),\r\n  getFeatured: () => api.get('/api/videos/featured'),\r\n  getById: (id) => api.get(`/api/videos/${id}`),\r\n  watch: (id, watchData) => api.post(`/api/videos/${id}/watch`, watchData),\r\n  getWatchHistory: (params) => api.get('/api/videos/history/watched', { params }),\r\n  getCategories: () => api.get('/api/videos/categories/list'),\r\n  getTrending: () => api.get('/api/videos/trending/list'),\r\n};\r\n\r\nexport const rewardsAPI = {\r\n  getStats: () => api.get('/api/rewards/stats'),\r\n  getHistory: (params) => api.get('/api/rewards/history', { params }),\r\n  withdraw: (withdrawalData) => api.post('/api/rewards/withdraw', withdrawalData),\r\n  getWithdrawals: (params) => api.get('/api/rewards/withdrawals', { params }),\r\n  getWithdrawalMethods: () => api.get('/api/rewards/withdrawal-methods'),\r\n  getReferrals: () => api.get('/api/rewards/referrals'),\r\n  getDailyChart: (params) => api.get('/api/rewards/chart/daily', { params }),\r\n};\r\n\r\nexport const usersAPI = {\r\n  getProfile: () => api.get('/api/users/profile'),\r\n  updateProfile: (profileData) => api.put('/api/users/profile', profileData),\r\n  getStats: () => api.get('/api/users/stats'),\r\n  getWatchHistory: (params) => api.get('/api/users/watch-history', { params }),\r\n  getReferrals: () => api.get('/api/users/referrals'),\r\n  deactivateAccount: (password) => api.post('/api/users/deactivate', { password }),\r\n  deleteAccount: (password) => api.delete('/api/users/delete', { data: { password } }),\r\n  getAchievements: () => api.get('/api/users/achievements'),\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}